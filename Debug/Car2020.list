
Car2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fc8  08002fc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fc8  08002fc8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fc8  08002fc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  08002fdc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08002fdc  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f82a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e4f  00000000  00000000  0002f85f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  000316b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  000321e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000154c2  00000000  00000000  00032c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad17  00000000  00000000  0004811a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071f86  00000000  00000000  00052e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4db7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e7c  00000000  00000000  000c4e34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f84 	.word	0x08002f84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002f84 	.word	0x08002f84

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f91f 	bl	80003a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fc8e 	bl	8002a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f937 	bl	800040a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f8ff 	bl	80003b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	f003 021f 	and.w	r2, r3, #31
 8000284:	4906      	ldr	r1, [pc, #24]	; (80002a0 <NVIC_EnableIRQ+0x2c>)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	095b      	lsrs	r3, r3, #5
 800028c:	2001      	movs	r0, #1
 800028e:	fa00 f202 	lsl.w	r2, r0, r2
 8000292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da0b      	bge.n	80002d0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	490c      	ldr	r1, [pc, #48]	; (80002f0 <NVIC_SetPriority+0x4c>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f003 030f 	and.w	r3, r3, #15
 80002c4:	3b04      	subs	r3, #4
 80002c6:	0112      	lsls	r2, r2, #4
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	440b      	add	r3, r1
 80002cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ce:	e009      	b.n	80002e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <NVIC_SetPriority+0x50>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b089      	sub	sp, #36	; 0x24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f003 0307 	and.w	r3, r3, #7
 800030a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	f1c3 0307 	rsb	r3, r3, #7
 8000312:	2b04      	cmp	r3, #4
 8000314:	bf28      	it	cs
 8000316:	2304      	movcs	r3, #4
 8000318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	3304      	adds	r3, #4
 800031e:	2b06      	cmp	r3, #6
 8000320:	d902      	bls.n	8000328 <NVIC_EncodePriority+0x30>
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3b03      	subs	r3, #3
 8000326:	e000      	b.n	800032a <NVIC_EncodePriority+0x32>
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800032c:	f04f 32ff 	mov.w	r2, #4294967295
 8000330:	69bb      	ldr	r3, [r7, #24]
 8000332:	fa02 f303 	lsl.w	r3, r2, r3
 8000336:	43da      	mvns	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	401a      	ands	r2, r3
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000340:	f04f 31ff 	mov.w	r1, #4294967295
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	43d9      	mvns	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	4313      	orrs	r3, r2
         );
}
 8000352:	4618      	mov	r0, r3
 8000354:	3724      	adds	r7, #36	; 0x24
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3b01      	subs	r3, #1
 8000368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800036c:	d301      	bcc.n	8000372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800036e:	2301      	movs	r3, #1
 8000370:	e00f      	b.n	8000392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <SysTick_Config+0x40>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3b01      	subs	r3, #1
 8000378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800037a:	210f      	movs	r1, #15
 800037c:	f04f 30ff 	mov.w	r0, #4294967295
 8000380:	f7ff ff90 	bl	80002a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <SysTick_Config+0x40>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <SysTick_Config+0x40>)
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000390:	2300      	movs	r3, #0
}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	e000e010 	.word	0xe000e010

080003a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f7ff ff31 	bl	8000210 <NVIC_SetPriorityGrouping>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b086      	sub	sp, #24
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	4603      	mov	r3, r0
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
 80003c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003c8:	f7ff ff46 	bl	8000258 <NVIC_GetPriorityGrouping>
 80003cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	68b9      	ldr	r1, [r7, #8]
 80003d2:	6978      	ldr	r0, [r7, #20]
 80003d4:	f7ff ff90 	bl	80002f8 <NVIC_EncodePriority>
 80003d8:	4602      	mov	r2, r0
 80003da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003de:	4611      	mov	r1, r2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff5f 	bl	80002a4 <NVIC_SetPriority>
}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4603      	mov	r3, r0
 80003f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff39 	bl	8000274 <NVIC_EnableIRQ>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ffa2 	bl	800035c <SysTick_Config>
 8000418:	4603      	mov	r3, r0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800042c:	2300      	movs	r3, #0
 800042e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000436:	2b02      	cmp	r3, #2
 8000438:	d005      	beq.n	8000446 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2204      	movs	r2, #4
 800043e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000440:	2301      	movs	r3, #1
 8000442:	73fb      	strb	r3, [r7, #15]
 8000444:	e051      	b.n	80004ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f022 020e 	bic.w	r2, r2, #14
 8000454:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f022 0201 	bic.w	r2, r2, #1
 8000464:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a22      	ldr	r2, [pc, #136]	; (80004f4 <HAL_DMA_Abort_IT+0xd0>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d029      	beq.n	80004c4 <HAL_DMA_Abort_IT+0xa0>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a20      	ldr	r2, [pc, #128]	; (80004f8 <HAL_DMA_Abort_IT+0xd4>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d022      	beq.n	80004c0 <HAL_DMA_Abort_IT+0x9c>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a1f      	ldr	r2, [pc, #124]	; (80004fc <HAL_DMA_Abort_IT+0xd8>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d01a      	beq.n	80004ba <HAL_DMA_Abort_IT+0x96>
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a1d      	ldr	r2, [pc, #116]	; (8000500 <HAL_DMA_Abort_IT+0xdc>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d012      	beq.n	80004b4 <HAL_DMA_Abort_IT+0x90>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a1c      	ldr	r2, [pc, #112]	; (8000504 <HAL_DMA_Abort_IT+0xe0>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d00a      	beq.n	80004ae <HAL_DMA_Abort_IT+0x8a>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a1a      	ldr	r2, [pc, #104]	; (8000508 <HAL_DMA_Abort_IT+0xe4>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d102      	bne.n	80004a8 <HAL_DMA_Abort_IT+0x84>
 80004a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004a6:	e00e      	b.n	80004c6 <HAL_DMA_Abort_IT+0xa2>
 80004a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004ac:	e00b      	b.n	80004c6 <HAL_DMA_Abort_IT+0xa2>
 80004ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004b2:	e008      	b.n	80004c6 <HAL_DMA_Abort_IT+0xa2>
 80004b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b8:	e005      	b.n	80004c6 <HAL_DMA_Abort_IT+0xa2>
 80004ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004be:	e002      	b.n	80004c6 <HAL_DMA_Abort_IT+0xa2>
 80004c0:	2310      	movs	r3, #16
 80004c2:	e000      	b.n	80004c6 <HAL_DMA_Abort_IT+0xa2>
 80004c4:	2301      	movs	r3, #1
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <HAL_DMA_Abort_IT+0xe8>)
 80004c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2201      	movs	r2, #1
 80004ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2200      	movs	r2, #0
 80004d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d003      	beq.n	80004ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	4798      	blx	r3
    } 
  }
  return status;
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40020008 	.word	0x40020008
 80004f8:	4002001c 	.word	0x4002001c
 80004fc:	40020030 	.word	0x40020030
 8000500:	40020044 	.word	0x40020044
 8000504:	40020058 	.word	0x40020058
 8000508:	4002006c 	.word	0x4002006c
 800050c:	40020000 	.word	0x40020000

08000510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000510:	b480      	push	{r7}
 8000512:	b08b      	sub	sp, #44	; 0x2c
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000526:	2300      	movs	r3, #0
 8000528:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800052e:	2300      	movs	r3, #0
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
 8000532:	e127      	b.n	8000784 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000534:	2201      	movs	r2, #1
 8000536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	69fa      	ldr	r2, [r7, #28]
 8000544:	4013      	ands	r3, r2
 8000546:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000548:	69ba      	ldr	r2, [r7, #24]
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	429a      	cmp	r2, r3
 800054e:	f040 8116 	bne.w	800077e <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	2b12      	cmp	r3, #18
 8000558:	d034      	beq.n	80005c4 <HAL_GPIO_Init+0xb4>
 800055a:	2b12      	cmp	r3, #18
 800055c:	d80d      	bhi.n	800057a <HAL_GPIO_Init+0x6a>
 800055e:	2b02      	cmp	r3, #2
 8000560:	d02b      	beq.n	80005ba <HAL_GPIO_Init+0xaa>
 8000562:	2b02      	cmp	r3, #2
 8000564:	d804      	bhi.n	8000570 <HAL_GPIO_Init+0x60>
 8000566:	2b00      	cmp	r3, #0
 8000568:	d031      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
 800056a:	2b01      	cmp	r3, #1
 800056c:	d01c      	beq.n	80005a8 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800056e:	e048      	b.n	8000602 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000570:	2b03      	cmp	r3, #3
 8000572:	d043      	beq.n	80005fc <HAL_GPIO_Init+0xec>
 8000574:	2b11      	cmp	r3, #17
 8000576:	d01b      	beq.n	80005b0 <HAL_GPIO_Init+0xa0>
          break;
 8000578:	e043      	b.n	8000602 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800057a:	4a87      	ldr	r2, [pc, #540]	; (8000798 <HAL_GPIO_Init+0x288>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d026      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
 8000580:	4a85      	ldr	r2, [pc, #532]	; (8000798 <HAL_GPIO_Init+0x288>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d806      	bhi.n	8000594 <HAL_GPIO_Init+0x84>
 8000586:	4a85      	ldr	r2, [pc, #532]	; (800079c <HAL_GPIO_Init+0x28c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d020      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
 800058c:	4a84      	ldr	r2, [pc, #528]	; (80007a0 <HAL_GPIO_Init+0x290>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d01d      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
          break;
 8000592:	e036      	b.n	8000602 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000594:	4a83      	ldr	r2, [pc, #524]	; (80007a4 <HAL_GPIO_Init+0x294>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d019      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
 800059a:	4a83      	ldr	r2, [pc, #524]	; (80007a8 <HAL_GPIO_Init+0x298>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d016      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
 80005a0:	4a82      	ldr	r2, [pc, #520]	; (80007ac <HAL_GPIO_Init+0x29c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d013      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
          break;
 80005a6:	e02c      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	623b      	str	r3, [r7, #32]
          break;
 80005ae:	e028      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	3304      	adds	r3, #4
 80005b6:	623b      	str	r3, [r7, #32]
          break;
 80005b8:	e023      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	3308      	adds	r3, #8
 80005c0:	623b      	str	r3, [r7, #32]
          break;
 80005c2:	e01e      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	330c      	adds	r3, #12
 80005ca:	623b      	str	r3, [r7, #32]
          break;
 80005cc:	e019      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d102      	bne.n	80005dc <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005d6:	2304      	movs	r3, #4
 80005d8:	623b      	str	r3, [r7, #32]
          break;
 80005da:	e012      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d105      	bne.n	80005f0 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005e4:	2308      	movs	r3, #8
 80005e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	69fa      	ldr	r2, [r7, #28]
 80005ec:	611a      	str	r2, [r3, #16]
          break;
 80005ee:	e008      	b.n	8000602 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005f0:	2308      	movs	r3, #8
 80005f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	69fa      	ldr	r2, [r7, #28]
 80005f8:	615a      	str	r2, [r3, #20]
          break;
 80005fa:	e002      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005fc:	2300      	movs	r3, #0
 80005fe:	623b      	str	r3, [r7, #32]
          break;
 8000600:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	2bff      	cmp	r3, #255	; 0xff
 8000606:	d801      	bhi.n	800060c <HAL_GPIO_Init+0xfc>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	e001      	b.n	8000610 <HAL_GPIO_Init+0x100>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3304      	adds	r3, #4
 8000610:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	2bff      	cmp	r3, #255	; 0xff
 8000616:	d802      	bhi.n	800061e <HAL_GPIO_Init+0x10e>
 8000618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	e002      	b.n	8000624 <HAL_GPIO_Init+0x114>
 800061e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000620:	3b08      	subs	r3, #8
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	210f      	movs	r1, #15
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	fa01 f303 	lsl.w	r3, r1, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	401a      	ands	r2, r3
 8000636:	6a39      	ldr	r1, [r7, #32]
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	fa01 f303 	lsl.w	r3, r1, r3
 800063e:	431a      	orrs	r2, r3
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	2b00      	cmp	r3, #0
 800064e:	f000 8096 	beq.w	800077e <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000652:	4b57      	ldr	r3, [pc, #348]	; (80007b0 <HAL_GPIO_Init+0x2a0>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a56      	ldr	r2, [pc, #344]	; (80007b0 <HAL_GPIO_Init+0x2a0>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b54      	ldr	r3, [pc, #336]	; (80007b0 <HAL_GPIO_Init+0x2a0>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800066a:	4a52      	ldr	r2, [pc, #328]	; (80007b4 <HAL_GPIO_Init+0x2a4>)
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	089b      	lsrs	r3, r3, #2
 8000670:	3302      	adds	r3, #2
 8000672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000676:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067a:	f003 0303 	and.w	r3, r3, #3
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	220f      	movs	r2, #15
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43db      	mvns	r3, r3
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	4013      	ands	r3, r2
 800068c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a49      	ldr	r2, [pc, #292]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d013      	beq.n	80006be <HAL_GPIO_Init+0x1ae>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a48      	ldr	r2, [pc, #288]	; (80007bc <HAL_GPIO_Init+0x2ac>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d00d      	beq.n	80006ba <HAL_GPIO_Init+0x1aa>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a47      	ldr	r2, [pc, #284]	; (80007c0 <HAL_GPIO_Init+0x2b0>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d007      	beq.n	80006b6 <HAL_GPIO_Init+0x1a6>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a46      	ldr	r2, [pc, #280]	; (80007c4 <HAL_GPIO_Init+0x2b4>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d101      	bne.n	80006b2 <HAL_GPIO_Init+0x1a2>
 80006ae:	2303      	movs	r3, #3
 80006b0:	e006      	b.n	80006c0 <HAL_GPIO_Init+0x1b0>
 80006b2:	2304      	movs	r3, #4
 80006b4:	e004      	b.n	80006c0 <HAL_GPIO_Init+0x1b0>
 80006b6:	2302      	movs	r3, #2
 80006b8:	e002      	b.n	80006c0 <HAL_GPIO_Init+0x1b0>
 80006ba:	2301      	movs	r3, #1
 80006bc:	e000      	b.n	80006c0 <HAL_GPIO_Init+0x1b0>
 80006be:	2300      	movs	r3, #0
 80006c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006c2:	f002 0203 	and.w	r2, r2, #3
 80006c6:	0092      	lsls	r2, r2, #2
 80006c8:	4093      	lsls	r3, r2
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80006d0:	4938      	ldr	r1, [pc, #224]	; (80007b4 <HAL_GPIO_Init+0x2a4>)
 80006d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d4:	089b      	lsrs	r3, r3, #2
 80006d6:	3302      	adds	r3, #2
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d006      	beq.n	80006f8 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006ea:	4b37      	ldr	r3, [pc, #220]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4936      	ldr	r1, [pc, #216]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	600b      	str	r3, [r1, #0]
 80006f6:	e006      	b.n	8000706 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006f8:	4b33      	ldr	r3, [pc, #204]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	43db      	mvns	r3, r3
 8000700:	4931      	ldr	r1, [pc, #196]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070e:	2b00      	cmp	r3, #0
 8000710:	d006      	beq.n	8000720 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000712:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 8000714:	685a      	ldr	r2, [r3, #4]
 8000716:	492c      	ldr	r1, [pc, #176]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	4313      	orrs	r3, r2
 800071c:	604b      	str	r3, [r1, #4]
 800071e:	e006      	b.n	800072e <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 8000722:	685a      	ldr	r2, [r3, #4]
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	43db      	mvns	r3, r3
 8000728:	4927      	ldr	r1, [pc, #156]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 800072a:	4013      	ands	r3, r2
 800072c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000736:	2b00      	cmp	r3, #0
 8000738:	d006      	beq.n	8000748 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 800073c:	689a      	ldr	r2, [r3, #8]
 800073e:	4922      	ldr	r1, [pc, #136]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	4313      	orrs	r3, r2
 8000744:	608b      	str	r3, [r1, #8]
 8000746:	e006      	b.n	8000756 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	43db      	mvns	r3, r3
 8000750:	491d      	ldr	r1, [pc, #116]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 8000752:	4013      	ands	r3, r2
 8000754:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075e:	2b00      	cmp	r3, #0
 8000760:	d006      	beq.n	8000770 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 8000764:	68da      	ldr	r2, [r3, #12]
 8000766:	4918      	ldr	r1, [pc, #96]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	4313      	orrs	r3, r2
 800076c:	60cb      	str	r3, [r1, #12]
 800076e:	e006      	b.n	800077e <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 8000772:	68da      	ldr	r2, [r3, #12]
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	43db      	mvns	r3, r3
 8000778:	4913      	ldr	r1, [pc, #76]	; (80007c8 <HAL_GPIO_Init+0x2b8>)
 800077a:	4013      	ands	r3, r2
 800077c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	3301      	adds	r3, #1
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
 8000784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000786:	2b0f      	cmp	r3, #15
 8000788:	f67f aed4 	bls.w	8000534 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800078c:	bf00      	nop
 800078e:	372c      	adds	r7, #44	; 0x2c
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	10210000 	.word	0x10210000
 800079c:	10110000 	.word	0x10110000
 80007a0:	10120000 	.word	0x10120000
 80007a4:	10310000 	.word	0x10310000
 80007a8:	10320000 	.word	0x10320000
 80007ac:	10220000 	.word	0x10220000
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010000 	.word	0x40010000
 80007b8:	40010800 	.word	0x40010800
 80007bc:	40010c00 	.word	0x40010c00
 80007c0:	40011000 	.word	0x40011000
 80007c4:	40011400 	.word	0x40011400
 80007c8:	40010400 	.word	0x40010400

080007cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
 80007d8:	4613      	mov	r3, r2
 80007da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007dc:	787b      	ldrb	r3, [r7, #1]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d003      	beq.n	80007ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007e2:	887a      	ldrh	r2, [r7, #2]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80007e8:	e003      	b.n	80007f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	041a      	lsls	r2, r3, #16
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	611a      	str	r2, [r3, #16]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000808:	695a      	ldr	r2, [r3, #20]
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	4013      	ands	r3, r2
 800080e:	2b00      	cmp	r3, #0
 8000810:	d006      	beq.n	8000820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f806 	bl	800082c <HAL_GPIO_EXTI_Callback>
  }
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40010400 	.word	0x40010400

0800082c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	2b00      	cmp	r3, #0
 8000856:	f000 8087 	beq.w	8000968 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800085a:	4b92      	ldr	r3, [pc, #584]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	f003 030c 	and.w	r3, r3, #12
 8000862:	2b04      	cmp	r3, #4
 8000864:	d00c      	beq.n	8000880 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000866:	4b8f      	ldr	r3, [pc, #572]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f003 030c 	and.w	r3, r3, #12
 800086e:	2b08      	cmp	r3, #8
 8000870:	d112      	bne.n	8000898 <HAL_RCC_OscConfig+0x58>
 8000872:	4b8c      	ldr	r3, [pc, #560]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800087a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800087e:	d10b      	bne.n	8000898 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000880:	4b88      	ldr	r3, [pc, #544]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000888:	2b00      	cmp	r3, #0
 800088a:	d06c      	beq.n	8000966 <HAL_RCC_OscConfig+0x126>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d168      	bne.n	8000966 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	e22d      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008a0:	d106      	bne.n	80008b0 <HAL_RCC_OscConfig+0x70>
 80008a2:	4b80      	ldr	r3, [pc, #512]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a7f      	ldr	r2, [pc, #508]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80008a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	e02e      	b.n	800090e <HAL_RCC_OscConfig+0xce>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d10c      	bne.n	80008d2 <HAL_RCC_OscConfig+0x92>
 80008b8:	4b7a      	ldr	r3, [pc, #488]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a79      	ldr	r2, [pc, #484]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80008be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b77      	ldr	r3, [pc, #476]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a76      	ldr	r2, [pc, #472]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80008ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	e01d      	b.n	800090e <HAL_RCC_OscConfig+0xce>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008da:	d10c      	bne.n	80008f6 <HAL_RCC_OscConfig+0xb6>
 80008dc:	4b71      	ldr	r3, [pc, #452]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a70      	ldr	r2, [pc, #448]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80008e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b6e      	ldr	r3, [pc, #440]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a6d      	ldr	r2, [pc, #436]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80008ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	e00b      	b.n	800090e <HAL_RCC_OscConfig+0xce>
 80008f6:	4b6b      	ldr	r3, [pc, #428]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a6a      	ldr	r2, [pc, #424]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80008fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000900:	6013      	str	r3, [r2, #0]
 8000902:	4b68      	ldr	r3, [pc, #416]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a67      	ldr	r2, [pc, #412]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 8000908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800090c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d013      	beq.n	800093e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000916:	f7ff fc71 	bl	80001fc <HAL_GetTick>
 800091a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800091c:	e008      	b.n	8000930 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800091e:	f7ff fc6d 	bl	80001fc <HAL_GetTick>
 8000922:	4602      	mov	r2, r0
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	2b64      	cmp	r3, #100	; 0x64
 800092a:	d901      	bls.n	8000930 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800092c:	2303      	movs	r3, #3
 800092e:	e1e1      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000930:	4b5c      	ldr	r3, [pc, #368]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d0f0      	beq.n	800091e <HAL_RCC_OscConfig+0xde>
 800093c:	e014      	b.n	8000968 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800093e:	f7ff fc5d 	bl	80001fc <HAL_GetTick>
 8000942:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000944:	e008      	b.n	8000958 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000946:	f7ff fc59 	bl	80001fc <HAL_GetTick>
 800094a:	4602      	mov	r2, r0
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	2b64      	cmp	r3, #100	; 0x64
 8000952:	d901      	bls.n	8000958 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000954:	2303      	movs	r3, #3
 8000956:	e1cd      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000958:	4b52      	ldr	r3, [pc, #328]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1f0      	bne.n	8000946 <HAL_RCC_OscConfig+0x106>
 8000964:	e000      	b.n	8000968 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000966:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	2b00      	cmp	r3, #0
 8000972:	d063      	beq.n	8000a3c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000974:	4b4b      	ldr	r3, [pc, #300]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 030c 	and.w	r3, r3, #12
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00b      	beq.n	8000998 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000980:	4b48      	ldr	r3, [pc, #288]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 030c 	and.w	r3, r3, #12
 8000988:	2b08      	cmp	r3, #8
 800098a:	d11c      	bne.n	80009c6 <HAL_RCC_OscConfig+0x186>
 800098c:	4b45      	ldr	r3, [pc, #276]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d116      	bne.n	80009c6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000998:	4b42      	ldr	r3, [pc, #264]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f003 0302 	and.w	r3, r3, #2
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d005      	beq.n	80009b0 <HAL_RCC_OscConfig+0x170>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d001      	beq.n	80009b0 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e1a1      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b0:	4b3c      	ldr	r3, [pc, #240]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	4939      	ldr	r1, [pc, #228]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80009c0:	4313      	orrs	r3, r2
 80009c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009c4:	e03a      	b.n	8000a3c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d020      	beq.n	8000a10 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009ce:	4b36      	ldr	r3, [pc, #216]	; (8000aa8 <HAL_RCC_OscConfig+0x268>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d4:	f7ff fc12 	bl	80001fc <HAL_GetTick>
 80009d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009da:	e008      	b.n	80009ee <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009dc:	f7ff fc0e 	bl	80001fc <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d901      	bls.n	80009ee <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80009ea:	2303      	movs	r3, #3
 80009ec:	e182      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0f0      	beq.n	80009dc <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	00db      	lsls	r3, r3, #3
 8000a08:	4926      	ldr	r1, [pc, #152]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	600b      	str	r3, [r1, #0]
 8000a0e:	e015      	b.n	8000a3c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <HAL_RCC_OscConfig+0x268>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a16:	f7ff fbf1 	bl	80001fc <HAL_GetTick>
 8000a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a1c:	e008      	b.n	8000a30 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a1e:	f7ff fbed 	bl	80001fc <HAL_GetTick>
 8000a22:	4602      	mov	r2, r0
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d901      	bls.n	8000a30 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	e161      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f0      	bne.n	8000a1e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f003 0308 	and.w	r3, r3, #8
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d039      	beq.n	8000abc <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d019      	beq.n	8000a84 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a56:	f7ff fbd1 	bl	80001fc <HAL_GetTick>
 8000a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a5c:	e008      	b.n	8000a70 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a5e:	f7ff fbcd 	bl	80001fc <HAL_GetTick>
 8000a62:	4602      	mov	r2, r0
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d901      	bls.n	8000a70 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e141      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_RCC_OscConfig+0x264>)
 8000a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0f0      	beq.n	8000a5e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f000 fae3 	bl	8001048 <RCC_Delay>
 8000a82:	e01b      	b.n	8000abc <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a8a:	f7ff fbb7 	bl	80001fc <HAL_GetTick>
 8000a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a90:	e00e      	b.n	8000ab0 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a92:	f7ff fbb3 	bl	80001fc <HAL_GetTick>
 8000a96:	4602      	mov	r2, r0
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d907      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e127      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	42420000 	.word	0x42420000
 8000aac:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab0:	4b92      	ldr	r3, [pc, #584]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1ea      	bne.n	8000a92 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f000 80a6 	beq.w	8000c16 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000aca:	2300      	movs	r3, #0
 8000acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ace:	4b8b      	ldr	r3, [pc, #556]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d10d      	bne.n	8000af6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b88      	ldr	r3, [pc, #544]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a87      	ldr	r2, [pc, #540]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b85      	ldr	r3, [pc, #532]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000af2:	2301      	movs	r3, #1
 8000af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af6:	4b82      	ldr	r3, [pc, #520]	; (8000d00 <HAL_RCC_OscConfig+0x4c0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d118      	bne.n	8000b34 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b02:	4b7f      	ldr	r3, [pc, #508]	; (8000d00 <HAL_RCC_OscConfig+0x4c0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a7e      	ldr	r2, [pc, #504]	; (8000d00 <HAL_RCC_OscConfig+0x4c0>)
 8000b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b0e:	f7ff fb75 	bl	80001fc <HAL_GetTick>
 8000b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b14:	e008      	b.n	8000b28 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b16:	f7ff fb71 	bl	80001fc <HAL_GetTick>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	2b64      	cmp	r3, #100	; 0x64
 8000b22:	d901      	bls.n	8000b28 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000b24:	2303      	movs	r3, #3
 8000b26:	e0e5      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b28:	4b75      	ldr	r3, [pc, #468]	; (8000d00 <HAL_RCC_OscConfig+0x4c0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0f0      	beq.n	8000b16 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d106      	bne.n	8000b4a <HAL_RCC_OscConfig+0x30a>
 8000b3c:	4b6f      	ldr	r3, [pc, #444]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000b3e:	6a1b      	ldr	r3, [r3, #32]
 8000b40:	4a6e      	ldr	r2, [pc, #440]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6213      	str	r3, [r2, #32]
 8000b48:	e02d      	b.n	8000ba6 <HAL_RCC_OscConfig+0x366>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10c      	bne.n	8000b6c <HAL_RCC_OscConfig+0x32c>
 8000b52:	4b6a      	ldr	r3, [pc, #424]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000b54:	6a1b      	ldr	r3, [r3, #32]
 8000b56:	4a69      	ldr	r2, [pc, #420]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000b58:	f023 0301 	bic.w	r3, r3, #1
 8000b5c:	6213      	str	r3, [r2, #32]
 8000b5e:	4b67      	ldr	r3, [pc, #412]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000b60:	6a1b      	ldr	r3, [r3, #32]
 8000b62:	4a66      	ldr	r2, [pc, #408]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000b64:	f023 0304 	bic.w	r3, r3, #4
 8000b68:	6213      	str	r3, [r2, #32]
 8000b6a:	e01c      	b.n	8000ba6 <HAL_RCC_OscConfig+0x366>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	2b05      	cmp	r3, #5
 8000b72:	d10c      	bne.n	8000b8e <HAL_RCC_OscConfig+0x34e>
 8000b74:	4b61      	ldr	r3, [pc, #388]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000b76:	6a1b      	ldr	r3, [r3, #32]
 8000b78:	4a60      	ldr	r2, [pc, #384]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6213      	str	r3, [r2, #32]
 8000b80:	4b5e      	ldr	r3, [pc, #376]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000b82:	6a1b      	ldr	r3, [r3, #32]
 8000b84:	4a5d      	ldr	r2, [pc, #372]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6213      	str	r3, [r2, #32]
 8000b8c:	e00b      	b.n	8000ba6 <HAL_RCC_OscConfig+0x366>
 8000b8e:	4b5b      	ldr	r3, [pc, #364]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000b90:	6a1b      	ldr	r3, [r3, #32]
 8000b92:	4a5a      	ldr	r2, [pc, #360]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000b94:	f023 0301 	bic.w	r3, r3, #1
 8000b98:	6213      	str	r3, [r2, #32]
 8000b9a:	4b58      	ldr	r3, [pc, #352]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000b9c:	6a1b      	ldr	r3, [r3, #32]
 8000b9e:	4a57      	ldr	r2, [pc, #348]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000ba0:	f023 0304 	bic.w	r3, r3, #4
 8000ba4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d015      	beq.n	8000bda <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bae:	f7ff fb25 	bl	80001fc <HAL_GetTick>
 8000bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bb4:	e00a      	b.n	8000bcc <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bb6:	f7ff fb21 	bl	80001fc <HAL_GetTick>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d901      	bls.n	8000bcc <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e093      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000bce:	6a1b      	ldr	r3, [r3, #32]
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0ee      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x376>
 8000bd8:	e014      	b.n	8000c04 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bda:	f7ff fb0f 	bl	80001fc <HAL_GetTick>
 8000bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000be0:	e00a      	b.n	8000bf8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000be2:	f7ff fb0b 	bl	80001fc <HAL_GetTick>
 8000be6:	4602      	mov	r2, r0
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d901      	bls.n	8000bf8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e07d      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bf8:	4b40      	ldr	r3, [pc, #256]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000bfa:	6a1b      	ldr	r3, [r3, #32]
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1ee      	bne.n	8000be2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d105      	bne.n	8000c16 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c0a:	4b3c      	ldr	r3, [pc, #240]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a3b      	ldr	r2, [pc, #236]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d069      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c1e:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 030c 	and.w	r3, r3, #12
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d061      	beq.n	8000cee <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d146      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c32:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <HAL_RCC_OscConfig+0x4c4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fae0 	bl	80001fc <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c40:	f7ff fadc 	bl	80001fc <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e050      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c52:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f0      	bne.n	8000c40 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a1b      	ldr	r3, [r3, #32]
 8000c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c66:	d108      	bne.n	8000c7a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	4921      	ldr	r1, [pc, #132]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a19      	ldr	r1, [r3, #32]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	430b      	orrs	r3, r1
 8000c8c:	491b      	ldr	r1, [pc, #108]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <HAL_RCC_OscConfig+0x4c4>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fab0 	bl	80001fc <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ca0:	f7ff faac 	bl	80001fc <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e020      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f0      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x460>
 8000cbe:	e018      	b.n	8000cf2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <HAL_RCC_OscConfig+0x4c4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fa99 	bl	80001fc <HAL_GetTick>
 8000cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ccc:	e008      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cce:	f7ff fa95 	bl	80001fc <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d901      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e009      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_RCC_OscConfig+0x4bc>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1f0      	bne.n	8000cce <HAL_RCC_OscConfig+0x48e>
 8000cec:	e001      	b.n	8000cf2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40007000 	.word	0x40007000
 8000d04:	42420060 	.word	0x42420060

08000d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d16:	4b7e      	ldr	r3, [pc, #504]	; (8000f10 <HAL_RCC_ClockConfig+0x208>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d910      	bls.n	8000d46 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d24:	4b7a      	ldr	r3, [pc, #488]	; (8000f10 <HAL_RCC_ClockConfig+0x208>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f023 0207 	bic.w	r2, r3, #7
 8000d2c:	4978      	ldr	r1, [pc, #480]	; (8000f10 <HAL_RCC_ClockConfig+0x208>)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d34:	4b76      	ldr	r3, [pc, #472]	; (8000f10 <HAL_RCC_ClockConfig+0x208>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0307 	and.w	r3, r3, #7
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d001      	beq.n	8000d46 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e0e0      	b.n	8000f08 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d020      	beq.n	8000d94 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d005      	beq.n	8000d6a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d5e:	4b6d      	ldr	r3, [pc, #436]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a6c      	ldr	r2, [pc, #432]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000d64:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d68:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d005      	beq.n	8000d82 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d76:	4b67      	ldr	r3, [pc, #412]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	4a66      	ldr	r2, [pc, #408]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000d7c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d80:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d82:	4b64      	ldr	r3, [pc, #400]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	4961      	ldr	r1, [pc, #388]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000d90:	4313      	orrs	r3, r2
 8000d92:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d06a      	beq.n	8000e76 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d107      	bne.n	8000db8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da8:	4b5a      	ldr	r3, [pc, #360]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d115      	bne.n	8000de0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e0a7      	b.n	8000f08 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d107      	bne.n	8000dd0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dc0:	4b54      	ldr	r3, [pc, #336]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d109      	bne.n	8000de0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e09b      	b.n	8000f08 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd0:	4b50      	ldr	r3, [pc, #320]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e093      	b.n	8000f08 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000de0:	4b4c      	ldr	r3, [pc, #304]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f023 0203 	bic.w	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	4949      	ldr	r1, [pc, #292]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000df2:	f7ff fa03 	bl	80001fc <HAL_GetTick>
 8000df6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d112      	bne.n	8000e26 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e00:	e00a      	b.n	8000e18 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e02:	f7ff f9fb 	bl	80001fc <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e077      	b.n	8000f08 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e18:	4b3e      	ldr	r3, [pc, #248]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 030c 	and.w	r3, r3, #12
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d1ee      	bne.n	8000e02 <HAL_RCC_ClockConfig+0xfa>
 8000e24:	e027      	b.n	8000e76 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d11d      	bne.n	8000e6a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e2e:	e00a      	b.n	8000e46 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e30:	f7ff f9e4 	bl	80001fc <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e060      	b.n	8000f08 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d1ee      	bne.n	8000e30 <HAL_RCC_ClockConfig+0x128>
 8000e52:	e010      	b.n	8000e76 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e54:	f7ff f9d2 	bl	80001fc <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e04e      	b.n	8000f08 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1ee      	bne.n	8000e54 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <HAL_RCC_ClockConfig+0x208>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d210      	bcs.n	8000ea6 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <HAL_RCC_ClockConfig+0x208>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f023 0207 	bic.w	r2, r3, #7
 8000e8c:	4920      	ldr	r1, [pc, #128]	; (8000f10 <HAL_RCC_ClockConfig+0x208>)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <HAL_RCC_ClockConfig+0x208>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d001      	beq.n	8000ea6 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e030      	b.n	8000f08 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d008      	beq.n	8000ec4 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000eb2:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	4915      	ldr	r1, [pc, #84]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0308 	and.w	r3, r3, #8
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d009      	beq.n	8000ee4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	490d      	ldr	r1, [pc, #52]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ee4:	f000 f81c 	bl	8000f20 <HAL_RCC_GetSysClockFreq>
 8000ee8:	4601      	mov	r1, r0
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_RCC_ClockConfig+0x20c>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	091b      	lsrs	r3, r3, #4
 8000ef0:	f003 030f 	and.w	r3, r3, #15
 8000ef4:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_RCC_ClockConfig+0x210>)
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_RCC_ClockConfig+0x214>)
 8000efe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff f939 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40022000 	.word	0x40022000
 8000f14:	40021000 	.word	0x40021000
 8000f18:	08002fb0 	.word	0x08002fb0
 8000f1c:	20000008 	.word	0x20000008

08000f20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f20:	b490      	push	{r4, r7}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f28:	1d3c      	adds	r4, r7, #4
 8000f2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f30:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	d002      	beq.n	8000f60 <HAL_RCC_GetSysClockFreq+0x40>
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d003      	beq.n	8000f66 <HAL_RCC_GetSysClockFreq+0x46>
 8000f5e:	e02d      	b.n	8000fbc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f62:	623b      	str	r3, [r7, #32]
      break;
 8000f64:	e02d      	b.n	8000fc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	0c9b      	lsrs	r3, r3, #18
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f72:	4413      	add	r3, r2
 8000f74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d013      	beq.n	8000fac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	0c5b      	lsrs	r3, r3, #17
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f92:	4413      	add	r3, r2
 8000f94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f98:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f9e:	fb02 f203 	mul.w	r2, r2, r3
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8000faa:	e004      	b.n	8000fb6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	623b      	str	r3, [r7, #32]
      break;
 8000fba:	e002      	b.n	8000fc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fbe:	623b      	str	r3, [r7, #32]
      break;
 8000fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000fc2:	6a3b      	ldr	r3, [r7, #32]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc90      	pop	{r4, r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	08002f9c 	.word	0x08002f9c
 8000fd4:	08002fac 	.word	0x08002fac
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	007a1200 	.word	0x007a1200
 8000fe0:	003d0900 	.word	0x003d0900

08000fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fe8:	4b02      	ldr	r3, [pc, #8]	; (8000ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ffc:	f7ff fff2 	bl	8000fe4 <HAL_RCC_GetHCLKFreq>
 8001000:	4601      	mov	r1, r0
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_RCC_GetPCLK1Freq+0x24>)
 800100e:	5cd3      	ldrb	r3, [r2, r3]
 8001010:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001014:	4618      	mov	r0, r3
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	08002fc0 	.word	0x08002fc0

08001020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_RCC_GetHCLKFreq>
 8001028:	4601      	mov	r1, r0
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	0adb      	lsrs	r3, r3, #11
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001036:	5cd3      	ldrb	r3, [r2, r3]
 8001038:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800103c:	4618      	mov	r0, r3
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000
 8001044:	08002fc0 	.word	0x08002fc0

08001048 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <RCC_Delay+0x34>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <RCC_Delay+0x38>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	0a5b      	lsrs	r3, r3, #9
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	fb02 f303 	mul.w	r3, r2, r3
 8001062:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001064:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1e5a      	subs	r2, r3, #1
 800106a:	60fa      	str	r2, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f9      	bne.n	8001064 <RCC_Delay+0x1c>
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008
 8001080:	10624dd3 	.word	0x10624dd3

08001084 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e01d      	b.n	80010d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d106      	bne.n	80010b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f001 fd3c 	bl	8002b28 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2202      	movs	r2, #2
 80010b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3304      	adds	r3, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4610      	mov	r0, r2
 80010c4:	f000 fb32 	bl	800172c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e01d      	b.n	8001128 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d106      	bne.n	8001106 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f001 fcf3 	bl	8002aec <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2202      	movs	r2, #2
 800110a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3304      	adds	r3, #4
 8001116:	4619      	mov	r1, r3
 8001118:	4610      	mov	r0, r2
 800111a:	f000 fb07 	bl	800172c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2201      	movs	r2, #1
 8001140:	6839      	ldr	r1, [r7, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fd9d 	bl	8001c82 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0b      	ldr	r2, [pc, #44]	; (800117c <HAL_TIM_PWM_Start+0x4c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d107      	bne.n	8001162 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001160:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0201 	orr.w	r2, r2, #1
 8001170:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40012c00 	.word	0x40012c00

08001180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b02      	cmp	r3, #2
 8001194:	d122      	bne.n	80011dc <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d11b      	bne.n	80011dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f06f 0202 	mvn.w	r2, #2
 80011ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 fa97 	bl	80016f6 <HAL_TIM_IC_CaptureCallback>
 80011c8:	e005      	b.n	80011d6 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fa8a 	bl	80016e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 fa99 	bl	8001708 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d122      	bne.n	8001230 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d11b      	bne.n	8001230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f06f 0204 	mvn.w	r2, #4
 8001200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2202      	movs	r2, #2
 8001206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 fa6d 	bl	80016f6 <HAL_TIM_IC_CaptureCallback>
 800121c:	e005      	b.n	800122a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 fa60 	bl	80016e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 fa6f 	bl	8001708 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b08      	cmp	r3, #8
 800123c:	d122      	bne.n	8001284 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b08      	cmp	r3, #8
 800124a:	d11b      	bne.n	8001284 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f06f 0208 	mvn.w	r2, #8
 8001254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2204      	movs	r2, #4
 800125a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fa43 	bl	80016f6 <HAL_TIM_IC_CaptureCallback>
 8001270:	e005      	b.n	800127e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 fa36 	bl	80016e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 fa45 	bl	8001708 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b10      	cmp	r3, #16
 8001290:	d122      	bne.n	80012d8 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	2b10      	cmp	r3, #16
 800129e:	d11b      	bne.n	80012d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f06f 0210 	mvn.w	r2, #16
 80012a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2208      	movs	r2, #8
 80012ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 fa19 	bl	80016f6 <HAL_TIM_IC_CaptureCallback>
 80012c4:	e005      	b.n	80012d2 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fa0c 	bl	80016e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 fa1b 	bl	8001708 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d10e      	bne.n	8001304 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d107      	bne.n	8001304 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f06f 0201 	mvn.w	r2, #1
 80012fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f9e7 	bl	80016d2 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130e:	2b80      	cmp	r3, #128	; 0x80
 8001310:	d10e      	bne.n	8001330 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131c:	2b80      	cmp	r3, #128	; 0x80
 800131e:	d107      	bne.n	8001330 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001328:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fd18 	bl	8001d60 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133a:	2b40      	cmp	r3, #64	; 0x40
 800133c:	d10e      	bne.n	800135c <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001348:	2b40      	cmp	r3, #64	; 0x40
 800134a:	d107      	bne.n	800135c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001354:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f9df 	bl	800171a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	f003 0320 	and.w	r3, r3, #32
 8001366:	2b20      	cmp	r3, #32
 8001368:	d10e      	bne.n	8001388 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	2b20      	cmp	r3, #32
 8001376:	d107      	bne.n	8001388 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f06f 0220 	mvn.w	r2, #32
 8001380:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fce3 	bl	8001d4e <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e0b4      	b.n	8001514 <HAL_TIM_PWM_ConfigChannel+0x184>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2202      	movs	r2, #2
 80013b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0c      	cmp	r3, #12
 80013be:	f200 809f 	bhi.w	8001500 <HAL_TIM_PWM_ConfigChannel+0x170>
 80013c2:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	080013fd 	.word	0x080013fd
 80013cc:	08001501 	.word	0x08001501
 80013d0:	08001501 	.word	0x08001501
 80013d4:	08001501 	.word	0x08001501
 80013d8:	0800143d 	.word	0x0800143d
 80013dc:	08001501 	.word	0x08001501
 80013e0:	08001501 	.word	0x08001501
 80013e4:	08001501 	.word	0x08001501
 80013e8:	0800147f 	.word	0x0800147f
 80013ec:	08001501 	.word	0x08001501
 80013f0:	08001501 	.word	0x08001501
 80013f4:	08001501 	.word	0x08001501
 80013f8:	080014bf 	.word	0x080014bf
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f9f8 	bl	80017f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	699a      	ldr	r2, [r3, #24]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0208 	orr.w	r2, r2, #8
 8001416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699a      	ldr	r2, [r3, #24]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0204 	bic.w	r2, r2, #4
 8001426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6999      	ldr	r1, [r3, #24]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	691a      	ldr	r2, [r3, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	619a      	str	r2, [r3, #24]
    }
    break;
 800143a:	e062      	b.n	8001502 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fa44 	bl	80018d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6999      	ldr	r1, [r3, #24]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	021a      	lsls	r2, r3, #8
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	619a      	str	r2, [r3, #24]
    }
    break;
 800147c:	e041      	b.n	8001502 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fa93 	bl	80019b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	69da      	ldr	r2, [r3, #28]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 0208 	orr.w	r2, r2, #8
 8001498:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	69da      	ldr	r2, [r3, #28]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0204 	bic.w	r2, r2, #4
 80014a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	69d9      	ldr	r1, [r3, #28]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	61da      	str	r2, [r3, #28]
    }
    break;
 80014bc:	e021      	b.n	8001502 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68b9      	ldr	r1, [r7, #8]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fae3 	bl	8001a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014d8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	69da      	ldr	r2, [r3, #28]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	69d9      	ldr	r1, [r3, #28]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	021a      	lsls	r2, r3, #8
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	61da      	str	r2, [r3, #28]
    }
    break;
 80014fe:	e000      	b.n	8001502 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8001500:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_TIM_ConfigClockSource+0x1c>
 8001534:	2302      	movs	r3, #2
 8001536:	e0c8      	b.n	80016ca <HAL_TIM_ConfigClockSource+0x1ae>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2202      	movs	r2, #2
 8001544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001556:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800155e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b40      	cmp	r3, #64	; 0x40
 800156e:	d077      	beq.n	8001660 <HAL_TIM_ConfigClockSource+0x144>
 8001570:	2b40      	cmp	r3, #64	; 0x40
 8001572:	d80e      	bhi.n	8001592 <HAL_TIM_ConfigClockSource+0x76>
 8001574:	2b10      	cmp	r3, #16
 8001576:	f000 808a 	beq.w	800168e <HAL_TIM_ConfigClockSource+0x172>
 800157a:	2b10      	cmp	r3, #16
 800157c:	d802      	bhi.n	8001584 <HAL_TIM_ConfigClockSource+0x68>
 800157e:	2b00      	cmp	r3, #0
 8001580:	d07e      	beq.n	8001680 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001582:	e099      	b.n	80016b8 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001584:	2b20      	cmp	r3, #32
 8001586:	f000 8089 	beq.w	800169c <HAL_TIM_ConfigClockSource+0x180>
 800158a:	2b30      	cmp	r3, #48	; 0x30
 800158c:	f000 808d 	beq.w	80016aa <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8001590:	e092      	b.n	80016b8 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001592:	2b70      	cmp	r3, #112	; 0x70
 8001594:	d016      	beq.n	80015c4 <HAL_TIM_ConfigClockSource+0xa8>
 8001596:	2b70      	cmp	r3, #112	; 0x70
 8001598:	d804      	bhi.n	80015a4 <HAL_TIM_ConfigClockSource+0x88>
 800159a:	2b50      	cmp	r3, #80	; 0x50
 800159c:	d040      	beq.n	8001620 <HAL_TIM_ConfigClockSource+0x104>
 800159e:	2b60      	cmp	r3, #96	; 0x60
 80015a0:	d04e      	beq.n	8001640 <HAL_TIM_ConfigClockSource+0x124>
    break;
 80015a2:	e089      	b.n	80016b8 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80015a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a8:	d003      	beq.n	80015b2 <HAL_TIM_ConfigClockSource+0x96>
 80015aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ae:	d024      	beq.n	80015fa <HAL_TIM_ConfigClockSource+0xde>
    break;
 80015b0:	e082      	b.n	80016b8 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0207 	bic.w	r2, r2, #7
 80015c0:	609a      	str	r2, [r3, #8]
    break;
 80015c2:	e079      	b.n	80016b8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6899      	ldr	r1, [r3, #8]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f000 fb34 	bl	8001c40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80015e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80015ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	609a      	str	r2, [r3, #8]
    break;
 80015f8:	e05e      	b.n	80016b8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	6899      	ldr	r1, [r3, #8]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f000 fb19 	bl	8001c40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800161c:	609a      	str	r2, [r3, #8]
    break;
 800161e:	e04b      	b.n	80016b8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	6859      	ldr	r1, [r3, #4]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	461a      	mov	r2, r3
 800162e:	f000 fa83 	bl	8001b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2150      	movs	r1, #80	; 0x50
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fae2 	bl	8001c02 <TIM_ITRx_SetConfig>
    break;
 800163e:	e03b      	b.n	80016b8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	461a      	mov	r2, r3
 800164e:	f000 faa5 	bl	8001b9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2160      	movs	r1, #96	; 0x60
 8001658:	4618      	mov	r0, r3
 800165a:	f000 fad2 	bl	8001c02 <TIM_ITRx_SetConfig>
    break;
 800165e:	e02b      	b.n	80016b8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	461a      	mov	r2, r3
 800166e:	f000 fa63 	bl	8001b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2140      	movs	r1, #64	; 0x40
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fac2 	bl	8001c02 <TIM_ITRx_SetConfig>
    break;
 800167e:	e01b      	b.n	80016b8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fabb 	bl	8001c02 <TIM_ITRx_SetConfig>
    break;
 800168c:	e014      	b.n	80016b8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2110      	movs	r1, #16
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fab4 	bl	8001c02 <TIM_ITRx_SetConfig>
    break;
 800169a:	e00d      	b.n	80016b8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2120      	movs	r1, #32
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 faad 	bl	8001c02 <TIM_ITRx_SetConfig>
    break;
 80016a8:	e006      	b.n	80016b8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2130      	movs	r1, #48	; 0x30
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 faa6 	bl	8001c02 <TIM_ITRx_SetConfig>
    break;
 80016b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a2a      	ldr	r2, [pc, #168]	; (80017ec <TIM_Base_SetConfig+0xc0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d00b      	beq.n	8001760 <TIM_Base_SetConfig+0x34>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174e:	d007      	beq.n	8001760 <TIM_Base_SetConfig+0x34>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <TIM_Base_SetConfig+0xc4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d003      	beq.n	8001760 <TIM_Base_SetConfig+0x34>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a26      	ldr	r2, [pc, #152]	; (80017f4 <TIM_Base_SetConfig+0xc8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d108      	bne.n	8001772 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4313      	orrs	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <TIM_Base_SetConfig+0xc0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00b      	beq.n	8001792 <TIM_Base_SetConfig+0x66>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001780:	d007      	beq.n	8001792 <TIM_Base_SetConfig+0x66>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <TIM_Base_SetConfig+0xc4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d003      	beq.n	8001792 <TIM_Base_SetConfig+0x66>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <TIM_Base_SetConfig+0xc8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d108      	bne.n	80017a4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017aa:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a07      	ldr	r2, [pc, #28]	; (80017ec <TIM_Base_SetConfig+0xc0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d103      	bne.n	80017dc <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	691a      	ldr	r2, [r3, #16]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	615a      	str	r2, [r3, #20]
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	40012c00 	.word	0x40012c00
 80017f0:	40000400 	.word	0x40000400
 80017f4:	40000800 	.word	0x40000800

080017f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	f023 0201 	bic.w	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f023 0302 	bic.w	r3, r3, #2
 800184c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4313      	orrs	r3, r2
 8001856:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <TIM_OC1_SetConfig+0xd4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d10c      	bne.n	800187a <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f023 0308 	bic.w	r3, r3, #8
 8001866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	4313      	orrs	r3, r2
 8001870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f023 0304 	bic.w	r3, r3, #4
 8001878:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a13      	ldr	r2, [pc, #76]	; (80018cc <TIM_OC1_SetConfig+0xd4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d111      	bne.n	80018a6 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	621a      	str	r2, [r3, #32]
}
 80018c0:	bf00      	nop
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40012c00 	.word	0x40012c00

080018d0 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	f023 0210 	bic.w	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800190a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f023 0320 	bic.w	r3, r3, #32
 8001926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4313      	orrs	r3, r2
 8001932:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a1d      	ldr	r2, [pc, #116]	; (80019ac <TIM_OC2_SetConfig+0xdc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d10d      	bne.n	8001958 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4313      	orrs	r3, r2
 800194e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001956:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a14      	ldr	r2, [pc, #80]	; (80019ac <TIM_OC2_SetConfig+0xdc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d113      	bne.n	8001988 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800196e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	621a      	str	r2, [r3, #32]
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	40012c00 	.word	0x40012c00

080019b0 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f023 0303 	bic.w	r3, r3, #3
 80019f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <TIM_OC3_SetConfig+0xdc>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10d      	bne.n	8001a36 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a34:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <TIM_OC3_SetConfig+0xdc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d113      	bne.n	8001a66 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	621a      	str	r2, [r3, #32]
}
 8001a80:	bf00      	nop
 8001a82:	371c      	adds	r7, #28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40012c00 	.word	0x40012c00

08001a90 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aca:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ae6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	031b      	lsls	r3, r3, #12
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <TIM_OC4_SetConfig+0xa4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d109      	bne.n	8001b10 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	019b      	lsls	r3, r3, #6
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	621a      	str	r2, [r3, #32]
}
 8001b2a:	bf00      	nop
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	40012c00 	.word	0x40012c00

08001b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	f023 0201 	bic.w	r2, r3, #1
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	f023 030a 	bic.w	r3, r3, #10
 8001b7c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	621a      	str	r2, [r3, #32]
}
 8001b92:	bf00      	nop
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f023 0210 	bic.w	r2, r3, #16
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001bce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	031b      	lsls	r3, r3, #12
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001be0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	621a      	str	r2, [r3, #32]
}
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b085      	sub	sp, #20
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c20:	887b      	ldrh	r3, [r7, #2]
 8001c22:	f043 0307 	orr.w	r3, r3, #7
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	609a      	str	r2, [r3, #8]
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	021a      	lsls	r2, r3, #8
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	609a      	str	r2, [r3, #8]
}
 8001c78:	bf00      	nop
 8001c7a:	371c      	adds	r7, #28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b087      	sub	sp, #28
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001c92:	2201      	movs	r2, #1
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a1a      	ldr	r2, [r3, #32]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a1a      	ldr	r2, [r3, #32]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	621a      	str	r2, [r3, #32]
}
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e032      	b.n	8001d44 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cfc:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d1e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6899      	ldr	r1, [r3, #8]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e03f      	b.n	8001e04 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d106      	bne.n	8001d9e <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 ff4d 	bl	8002c38 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2224      	movs	r2, #36	; 0x24
 8001da2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001db4:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fab2 	bl	8002320 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dda:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dea:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	4613      	mov	r3, r2
 8001e18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d140      	bne.n	8001ea8 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_UART_Receive_IT+0x26>
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e039      	b.n	8001eaa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_UART_Receive_IT+0x38>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e032      	b.n	8001eaa <HAL_UART_Receive_IT+0x9e>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	88fa      	ldrh	r2, [r7, #6]
 8001e56:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	88fa      	ldrh	r2, [r7, #6]
 8001e5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2222      	movs	r2, #34	; 0x22
 8001e68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e82:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0220 	orr.w	r2, r2, #32
 8001ea2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e000      	b.n	8001eaa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001ea8:	2302      	movs	r3, #2
  }
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_UART_IRQHandler+0x52>
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f98d 	bl	800221e <UART_Receive_IT>
      return;
 8001f04:	e0cc      	b.n	80020a0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80ab 	beq.w	8002064 <HAL_UART_IRQHandler+0x1b0>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <HAL_UART_IRQHandler+0x70>
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80a0 	beq.w	8002064 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_UART_IRQHandler+0x90>
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_UART_IRQHandler+0xb0>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	f043 0202 	orr.w	r2, r3, #2
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_UART_IRQHandler+0xd0>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	f043 0204 	orr.w	r2, r3, #4
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_UART_IRQHandler+0xf0>
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9c:	f043 0208 	orr.w	r2, r3, #8
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d078      	beq.n	800209e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_UART_IRQHandler+0x112>
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f92c 	bl	800221e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf14      	ite	ne
 8001fd4:	2301      	movne	r3, #1
 8001fd6:	2300      	moveq	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <HAL_UART_IRQHandler+0x13a>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d031      	beq.n	8002052 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f877 	bl	80020e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d023      	beq.n	800204a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002010:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002016:	2b00      	cmp	r3, #0
 8002018:	d013      	beq.n	8002042 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201e:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <HAL_UART_IRQHandler+0x1f4>)
 8002020:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe f9fc 	bl	8000424 <HAL_DMA_Abort_IT>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d016      	beq.n	8002060 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800203c:	4610      	mov	r0, r2
 800203e:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002040:	e00e      	b.n	8002060 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f844 	bl	80020d0 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002048:	e00a      	b.n	8002060 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f840 	bl	80020d0 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002050:	e006      	b.n	8002060 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f83c 	bl	80020d0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800205e:	e01e      	b.n	800209e <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002060:	bf00      	nop
    return;
 8002062:	e01c      	b.n	800209e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206a:	2b00      	cmp	r3, #0
 800206c:	d008      	beq.n	8002080 <HAL_UART_IRQHandler+0x1cc>
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f863 	bl	8002144 <UART_Transmit_IT>
    return;
 800207e:	e00f      	b.n	80020a0 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_UART_IRQHandler+0x1ec>
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f8aa 	bl	80021ee <UART_EndTransmit_IT>
    return;
 800209a:	bf00      	nop
 800209c:	e000      	b.n	80020a0 <HAL_UART_IRQHandler+0x1ec>
    return;
 800209e:	bf00      	nop
  }
}
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	0800211d 	.word	0x0800211d

080020ac <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80020f8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0201 	bic.w	r2, r2, #1
 8002108:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f7ff ffca 	bl	80020d0 <HAL_UART_ErrorCallback>
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b21      	cmp	r3, #33	; 0x21
 8002156:	d144      	bne.n	80021e2 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002160:	d11a      	bne.n	8002198 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002176:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	1c9a      	adds	r2, r3, #2
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	621a      	str	r2, [r3, #32]
 800218a:	e00e      	b.n	80021aa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	621a      	str	r2, [r3, #32]
 8002196:	e008      	b.n	80021aa <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	1c59      	adds	r1, r3, #1
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6211      	str	r1, [r2, #32]
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4619      	mov	r1, r3
 80021b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10f      	bne.n	80021de <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
  }
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002204:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ff4c 	bl	80020ac <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b22      	cmp	r3, #34	; 0x22
 8002230:	d171      	bne.n	8002316 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800223a:	d123      	bne.n	8002284 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10e      	bne.n	8002268 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	b29b      	uxth	r3, r3
 8002252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	1c9a      	adds	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
 8002266:	e029      	b.n	80022bc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	b29b      	uxth	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
 8002282:	e01b      	b.n	80022bc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10a      	bne.n	80022a2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6858      	ldr	r0, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	1c59      	adds	r1, r3, #1
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6291      	str	r1, [r2, #40]	; 0x28
 800229c:	b2c2      	uxtb	r2, r0
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	e00c      	b.n	80022bc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	1c58      	adds	r0, r3, #1
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	6288      	str	r0, [r1, #40]	; 0x28
 80022b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4619      	mov	r1, r3
 80022ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d120      	bne.n	8002312 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0220 	bic.w	r2, r2, #32
 80022de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ee:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff fed8 	bl	80020be <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e002      	b.n	8002318 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002316:	2302      	movs	r3, #2
  }
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002362:	f023 030c 	bic.w	r3, r3, #12
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	68f9      	ldr	r1, [r7, #12]
 800236c:	430b      	orrs	r3, r1
 800236e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6f      	ldr	r2, [pc, #444]	; (8002548 <UART_SetConfig+0x228>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d16b      	bne.n	8002468 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002390:	f7fe fe46 	bl	8001020 <HAL_RCC_GetPCLK2Freq>
 8002394:	4602      	mov	r2, r0
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	009a      	lsls	r2, r3, #2
 800239e:	441a      	add	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	4a68      	ldr	r2, [pc, #416]	; (800254c <UART_SetConfig+0x22c>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	011c      	lsls	r4, r3, #4
 80023b4:	f7fe fe34 	bl	8001020 <HAL_RCC_GetPCLK2Freq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	009a      	lsls	r2, r3, #2
 80023c2:	441a      	add	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80023ce:	f7fe fe27 	bl	8001020 <HAL_RCC_GetPCLK2Freq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	009a      	lsls	r2, r3, #2
 80023dc:	441a      	add	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	4a58      	ldr	r2, [pc, #352]	; (800254c <UART_SetConfig+0x22c>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2264      	movs	r2, #100	; 0x64
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	1aeb      	subs	r3, r5, r3
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	3332      	adds	r3, #50	; 0x32
 80023fc:	4a53      	ldr	r2, [pc, #332]	; (800254c <UART_SetConfig+0x22c>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002408:	441c      	add	r4, r3
 800240a:	f7fe fe09 	bl	8001020 <HAL_RCC_GetPCLK2Freq>
 800240e:	4602      	mov	r2, r0
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009a      	lsls	r2, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	fbb2 f5f3 	udiv	r5, r2, r3
 8002424:	f7fe fdfc 	bl	8001020 <HAL_RCC_GetPCLK2Freq>
 8002428:	4602      	mov	r2, r0
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	009a      	lsls	r2, r3, #2
 8002432:	441a      	add	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	4a43      	ldr	r2, [pc, #268]	; (800254c <UART_SetConfig+0x22c>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	2264      	movs	r2, #100	; 0x64
 8002448:	fb02 f303 	mul.w	r3, r2, r3
 800244c:	1aeb      	subs	r3, r5, r3
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	3332      	adds	r3, #50	; 0x32
 8002452:	4a3e      	ldr	r2, [pc, #248]	; (800254c <UART_SetConfig+0x22c>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4422      	add	r2, r4
 8002464:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002466:	e06a      	b.n	800253e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002468:	f7fe fdc6 	bl	8000ff8 <HAL_RCC_GetPCLK1Freq>
 800246c:	4602      	mov	r2, r0
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	009a      	lsls	r2, r3, #2
 8002476:	441a      	add	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	4a32      	ldr	r2, [pc, #200]	; (800254c <UART_SetConfig+0x22c>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	011c      	lsls	r4, r3, #4
 800248c:	f7fe fdb4 	bl	8000ff8 <HAL_RCC_GetPCLK1Freq>
 8002490:	4602      	mov	r2, r0
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	009a      	lsls	r2, r3, #2
 800249a:	441a      	add	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	fbb2 f5f3 	udiv	r5, r2, r3
 80024a6:	f7fe fda7 	bl	8000ff8 <HAL_RCC_GetPCLK1Freq>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	009a      	lsls	r2, r3, #2
 80024b4:	441a      	add	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	4a22      	ldr	r2, [pc, #136]	; (800254c <UART_SetConfig+0x22c>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2264      	movs	r2, #100	; 0x64
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	1aeb      	subs	r3, r5, r3
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	3332      	adds	r3, #50	; 0x32
 80024d4:	4a1d      	ldr	r2, [pc, #116]	; (800254c <UART_SetConfig+0x22c>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e0:	441c      	add	r4, r3
 80024e2:	f7fe fd89 	bl	8000ff8 <HAL_RCC_GetPCLK1Freq>
 80024e6:	4602      	mov	r2, r0
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	009a      	lsls	r2, r3, #2
 80024f0:	441a      	add	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	fbb2 f5f3 	udiv	r5, r2, r3
 80024fc:	f7fe fd7c 	bl	8000ff8 <HAL_RCC_GetPCLK1Freq>
 8002500:	4602      	mov	r2, r0
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	009a      	lsls	r2, r3, #2
 800250a:	441a      	add	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	4a0d      	ldr	r2, [pc, #52]	; (800254c <UART_SetConfig+0x22c>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	2264      	movs	r2, #100	; 0x64
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	1aeb      	subs	r3, r5, r3
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	3332      	adds	r3, #50	; 0x32
 800252a:	4a08      	ldr	r2, [pc, #32]	; (800254c <UART_SetConfig+0x22c>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	f003 020f 	and.w	r2, r3, #15
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4422      	add	r2, r4
 800253c:	609a      	str	r2, [r3, #8]
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bdb0      	pop	{r4, r5, r7, pc}
 8002546:	bf00      	nop
 8002548:	40013800 	.word	0x40013800
 800254c:	51eb851f 	.word	0x51eb851f

08002550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002554:	f7fd fdfa 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002558:	f000 f860 	bl	800261c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800255c:	f000 fa1e 	bl	800299c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002560:	f000 f9c8 	bl	80028f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002564:	f000 f9f0 	bl	8002948 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002568:	f000 f8a4 	bl	80026b4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800256c:	f000 f998 	bl	80028a0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8002570:	f000 f91e 	bl	80027b0 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002574:	f000 f892 	bl	800269c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Init(&huart1);
 8002578:	4823      	ldr	r0, [pc, #140]	; (8002608 <main+0xb8>)
 800257a:	f7ff fbfa 	bl	8001d72 <HAL_UART_Init>
//  HAL_TIM_Base_Start(&htim3);

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800257e:	2104      	movs	r1, #4
 8002580:	4822      	ldr	r0, [pc, #136]	; (800260c <main+0xbc>)
 8002582:	f7fe fdd5 	bl	8001130 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002586:	2100      	movs	r1, #0
 8002588:	4820      	ldr	r0, [pc, #128]	; (800260c <main+0xbc>)
 800258a:	f7fe fdd1 	bl	8001130 <HAL_TIM_PWM_Start>
//
//	  	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,led2_value*10);


	  /* Receive signal from HC06 */
	  HAL_UART_Receive_IT(&huart1, &buffer[0], sizeof(buffer));
 800258e:	2202      	movs	r2, #2
 8002590:	491f      	ldr	r1, [pc, #124]	; (8002610 <main+0xc0>)
 8002592:	481d      	ldr	r0, [pc, #116]	; (8002608 <main+0xb8>)
 8002594:	f7ff fc3a 	bl	8001e0c <HAL_UART_Receive_IT>


	  /* process new signal for motor driver */

	  if(buffer[0] != steering_value)
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <main+0xc0>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <main+0xc4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d011      	beq.n	80025ca <main+0x7a>
	  {
		  steering_value = buffer[0];
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <main+0xc0>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <main+0xc4>)
 80025ae:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 1000+steering_value*10);
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <main+0xc4>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <main+0xbc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3334      	adds	r3, #52	; 0x34
 80025c6:	3304      	adds	r3, #4
 80025c8:	601a      	str	r2, [r3, #0]
	  }
	  if(buffer[1] != speed_value)
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <main+0xc0>)
 80025cc:	785b      	ldrb	r3, [r3, #1]
 80025ce:	461a      	mov	r2, r3
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <main+0xc8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d0da      	beq.n	800258e <main+0x3e>
	  {
	     speed_value=buffer[1];
 80025d8:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <main+0xc0>)
 80025da:	785b      	ldrb	r3, [r3, #1]
 80025dc:	461a      	mov	r2, r3
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <main+0xc8>)
 80025e0:	601a      	str	r2, [r3, #0]

	     if(speed_value<=50)
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <main+0xc8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b32      	cmp	r3, #50	; 0x32
 80025e8:	dcd1      	bgt.n	800258e <main+0x3e>
	     {
	     __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,PWM_NEUTRAL_POSTION+PWM_FORWARD_OFFSET+(50-speed_value)/4);
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <main+0xc8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	da00      	bge.n	80025f8 <main+0xa8>
 80025f6:	3303      	adds	r3, #3
 80025f8:	109b      	asrs	r3, r3, #2
 80025fa:	f203 620e 	addw	r2, r3, #1550	; 0x60e
 80025fe:	4b03      	ldr	r3, [pc, #12]	; (800260c <main+0xbc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_UART_Receive_IT(&huart1, &buffer[0], sizeof(buffer));
 8002604:	e7c3      	b.n	800258e <main+0x3e>
 8002606:	bf00      	nop
 8002608:	200000f8 	.word	0x200000f8
 800260c:	200000b4 	.word	0x200000b4
 8002610:	20000138 	.word	0x20000138
 8002614:	2000006c 	.word	0x2000006c
 8002618:	20000184 	.word	0x20000184

0800261c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b090      	sub	sp, #64	; 0x40
 8002620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002622:	f107 0318 	add.w	r3, r7, #24
 8002626:	2228      	movs	r2, #40	; 0x28
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fca2 	bl	8002f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800263e:	2302      	movs	r3, #2
 8002640:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002642:	2301      	movs	r3, #1
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002646:	2310      	movs	r3, #16
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800264a:	2302      	movs	r3, #2
 800264c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800264e:	2300      	movs	r3, #0
 8002650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002652:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8002656:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002658:	f107 0318 	add.w	r3, r7, #24
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe f8ef 	bl	8000840 <HAL_RCC_OscConfig>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002668:	f000 fa08 	bl	8002a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800266c:	230f      	movs	r3, #15
 800266e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002670:	2302      	movs	r3, #2
 8002672:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002680:	1d3b      	adds	r3, r7, #4
 8002682:	2101      	movs	r1, #1
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fb3f 	bl	8000d08 <HAL_RCC_ClockConfig>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002690:	f000 f9f4 	bl	8002a7c <Error_Handler>
  }
}
 8002694:	bf00      	nop
 8002696:	3740      	adds	r7, #64	; 0x40
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2100      	movs	r1, #0
 80026a4:	201d      	movs	r0, #29
 80026a6:	f7fd fe86 	bl	80003b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026aa:	201d      	movs	r0, #29
 80026ac:	f7fd fe9f 	bl	80003ee <HAL_NVIC_EnableIRQ>
}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ba:	f107 0320 	add.w	r3, r7, #32
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	611a      	str	r2, [r3, #16]
 80026d2:	615a      	str	r2, [r3, #20]
 80026d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026d6:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <MX_TIM3_Init+0xf4>)
 80026d8:	4a34      	ldr	r2, [pc, #208]	; (80027ac <MX_TIM3_Init+0xf8>)
 80026da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 80026dc:	4b32      	ldr	r3, [pc, #200]	; (80027a8 <MX_TIM3_Init+0xf4>)
 80026de:	2220      	movs	r2, #32
 80026e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e2:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <MX_TIM3_Init+0xf4>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80026e8:	4b2f      	ldr	r3, [pc, #188]	; (80027a8 <MX_TIM3_Init+0xf4>)
 80026ea:	f644 6220 	movw	r2, #20000	; 0x4e20
 80026ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <MX_TIM3_Init+0xf4>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026f6:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <MX_TIM3_Init+0xf4>)
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026fc:	482a      	ldr	r0, [pc, #168]	; (80027a8 <MX_TIM3_Init+0xf4>)
 80026fe:	f7fe fcec 	bl	80010da <HAL_TIM_PWM_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002708:	f000 f9b8 	bl	8002a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800270c:	2320      	movs	r3, #32
 800270e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002714:	f107 0320 	add.w	r3, r7, #32
 8002718:	4619      	mov	r1, r3
 800271a:	4823      	ldr	r0, [pc, #140]	; (80027a8 <MX_TIM3_Init+0xf4>)
 800271c:	f7ff fad3 	bl	8001cc6 <HAL_TIMEx_MasterConfigSynchronization>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002726:	f000 f9a9 	bl	8002a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800272a:	2360      	movs	r3, #96	; 0x60
 800272c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 800272e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002732:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	2200      	movs	r2, #0
 8002740:	4619      	mov	r1, r3
 8002742:	4819      	ldr	r0, [pc, #100]	; (80027a8 <MX_TIM3_Init+0xf4>)
 8002744:	f7fe fe24 	bl	8001390 <HAL_TIM_PWM_ConfigChannel>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800274e:	f000 f995 	bl	8002a7c <Error_Handler>
  }
  sConfigOC.Pulse = 1500;
 8002752:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002756:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	2204      	movs	r2, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4812      	ldr	r0, [pc, #72]	; (80027a8 <MX_TIM3_Init+0xf4>)
 8002760:	f7fe fe16 	bl	8001390 <HAL_TIM_PWM_ConfigChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800276a:	f000 f987 	bl	8002a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	2208      	movs	r2, #8
 8002772:	4619      	mov	r1, r3
 8002774:	480c      	ldr	r0, [pc, #48]	; (80027a8 <MX_TIM3_Init+0xf4>)
 8002776:	f7fe fe0b 	bl	8001390 <HAL_TIM_PWM_ConfigChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002780:	f000 f97c 	bl	8002a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	220c      	movs	r2, #12
 8002788:	4619      	mov	r1, r3
 800278a:	4807      	ldr	r0, [pc, #28]	; (80027a8 <MX_TIM3_Init+0xf4>)
 800278c:	f7fe fe00 	bl	8001390 <HAL_TIM_PWM_ConfigChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002796:	f000 f971 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800279a:	4803      	ldr	r0, [pc, #12]	; (80027a8 <MX_TIM3_Init+0xf4>)
 800279c:	f000 f9e2 	bl	8002b64 <HAL_TIM_MspPostInit>

}
 80027a0:	bf00      	nop
 80027a2:	3728      	adds	r7, #40	; 0x28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200000b4 	.word	0x200000b4
 80027ac:	40000400 	.word	0x40000400

080027b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	; 0x38
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c4:	f107 0320 	add.w	r3, r7, #32
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
 80027dc:	615a      	str	r2, [r3, #20]
 80027de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027e0:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <MX_TIM4_Init+0xe8>)
 80027e2:	4a2e      	ldr	r2, [pc, #184]	; (800289c <MX_TIM4_Init+0xec>)
 80027e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32;
 80027e6:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <MX_TIM4_Init+0xe8>)
 80027e8:	2220      	movs	r2, #32
 80027ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <MX_TIM4_Init+0xe8>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80027f2:	4b29      	ldr	r3, [pc, #164]	; (8002898 <MX_TIM4_Init+0xe8>)
 80027f4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80027f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fa:	4b27      	ldr	r3, [pc, #156]	; (8002898 <MX_TIM4_Init+0xe8>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002800:	4b25      	ldr	r3, [pc, #148]	; (8002898 <MX_TIM4_Init+0xe8>)
 8002802:	2280      	movs	r2, #128	; 0x80
 8002804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002806:	4824      	ldr	r0, [pc, #144]	; (8002898 <MX_TIM4_Init+0xe8>)
 8002808:	f7fe fc3c 	bl	8001084 <HAL_TIM_Base_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002812:	f000 f933 	bl	8002a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800281c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002820:	4619      	mov	r1, r3
 8002822:	481d      	ldr	r0, [pc, #116]	; (8002898 <MX_TIM4_Init+0xe8>)
 8002824:	f7fe fe7a 	bl	800151c <HAL_TIM_ConfigClockSource>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800282e:	f000 f925 	bl	8002a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002832:	4819      	ldr	r0, [pc, #100]	; (8002898 <MX_TIM4_Init+0xe8>)
 8002834:	f7fe fc51 	bl	80010da <HAL_TIM_PWM_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800283e:	f000 f91d 	bl	8002a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800284a:	f107 0320 	add.w	r3, r7, #32
 800284e:	4619      	mov	r1, r3
 8002850:	4811      	ldr	r0, [pc, #68]	; (8002898 <MX_TIM4_Init+0xe8>)
 8002852:	f7ff fa38 	bl	8001cc6 <HAL_TIMEx_MasterConfigSynchronization>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800285c:	f000 f90e 	bl	8002a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002860:	2360      	movs	r3, #96	; 0x60
 8002862:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 15000;
 8002864:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002868:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	2200      	movs	r2, #0
 8002876:	4619      	mov	r1, r3
 8002878:	4807      	ldr	r0, [pc, #28]	; (8002898 <MX_TIM4_Init+0xe8>)
 800287a:	f7fe fd89 	bl	8001390 <HAL_TIM_PWM_ConfigChannel>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002884:	f000 f8fa 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002888:	4803      	ldr	r0, [pc, #12]	; (8002898 <MX_TIM4_Init+0xe8>)
 800288a:	f000 f96b 	bl	8002b64 <HAL_TIM_MspPostInit>

}
 800288e:	bf00      	nop
 8002890:	3738      	adds	r7, #56	; 0x38
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000002c 	.word	0x2000002c
 800289c:	40000800 	.word	0x40000800

080028a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <MX_USART1_UART_Init+0x4c>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <MX_USART1_UART_Init+0x50>)
 80028a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <MX_USART1_UART_Init+0x4c>)
 80028ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <MX_USART1_UART_Init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <MX_USART1_UART_Init+0x4c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <MX_USART1_UART_Init+0x4c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <MX_USART1_UART_Init+0x4c>)
 80028c6:	220c      	movs	r2, #12
 80028c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <MX_USART1_UART_Init+0x4c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <MX_USART1_UART_Init+0x4c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028d6:	4805      	ldr	r0, [pc, #20]	; (80028ec <MX_USART1_UART_Init+0x4c>)
 80028d8:	f7ff fa4b 	bl	8001d72 <HAL_UART_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028e2:	f000 f8cb 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200000f8 	.word	0x200000f8
 80028f0:	40013800 	.word	0x40013800

080028f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <MX_USART2_UART_Init+0x50>)
 80028fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 8002900:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 800291a:	220c      	movs	r2, #12
 800291c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800292a:	4805      	ldr	r0, [pc, #20]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 800292c:	f7ff fa21 	bl	8001d72 <HAL_UART_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002936:	f000 f8a1 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000144 	.word	0x20000144
 8002944:	40004400 	.word	0x40004400

08002948 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <MX_USART3_UART_Init+0x4c>)
 800294e:	4a12      	ldr	r2, [pc, #72]	; (8002998 <MX_USART3_UART_Init+0x50>)
 8002950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <MX_USART3_UART_Init+0x4c>)
 8002954:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MX_USART3_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <MX_USART3_UART_Init+0x4c>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <MX_USART3_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <MX_USART3_UART_Init+0x4c>)
 800296e:	220c      	movs	r2, #12
 8002970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <MX_USART3_UART_Init+0x4c>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <MX_USART3_UART_Init+0x4c>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800297e:	4805      	ldr	r0, [pc, #20]	; (8002994 <MX_USART3_UART_Init+0x4c>)
 8002980:	f7ff f9f7 	bl	8001d72 <HAL_UART_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800298a:	f000 f877 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000070 	.word	0x20000070
 8002998:	40004800 	.word	0x40004800

0800299c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a2:	f107 0310 	add.w	r3, r7, #16
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b0:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <MX_GPIO_Init+0xd0>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4a2d      	ldr	r2, [pc, #180]	; (8002a6c <MX_GPIO_Init+0xd0>)
 80029b6:	f043 0310 	orr.w	r3, r3, #16
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <MX_GPIO_Init+0xd0>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c8:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <MX_GPIO_Init+0xd0>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4a27      	ldr	r2, [pc, #156]	; (8002a6c <MX_GPIO_Init+0xd0>)
 80029ce:	f043 0320 	orr.w	r3, r3, #32
 80029d2:	6193      	str	r3, [r2, #24]
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <MX_GPIO_Init+0xd0>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e0:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <MX_GPIO_Init+0xd0>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	4a21      	ldr	r2, [pc, #132]	; (8002a6c <MX_GPIO_Init+0xd0>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6193      	str	r3, [r2, #24]
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <MX_GPIO_Init+0xd0>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <MX_GPIO_Init+0xd0>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <MX_GPIO_Init+0xd0>)
 80029fe:	f043 0308 	orr.w	r3, r3, #8
 8002a02:	6193      	str	r3, [r2, #24]
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <MX_GPIO_Init+0xd0>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8002a10:	2200      	movs	r2, #0
 8002a12:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002a16:	4816      	ldr	r0, [pc, #88]	; (8002a70 <MX_GPIO_Init+0xd4>)
 8002a18:	f7fd fed8 	bl	80007cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a22:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <MX_GPIO_Init+0xd8>)
 8002a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a2a:	f107 0310 	add.w	r3, r7, #16
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4811      	ldr	r0, [pc, #68]	; (8002a78 <MX_GPIO_Init+0xdc>)
 8002a32:	f7fd fd6d 	bl	8000510 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8002a36:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a44:	2302      	movs	r3, #2
 8002a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <MX_GPIO_Init+0xd4>)
 8002a50:	f7fd fd5e 	bl	8000510 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8002a54:	2200      	movs	r2, #0
 8002a56:	2103      	movs	r1, #3
 8002a58:	2028      	movs	r0, #40	; 0x28
 8002a5a:	f7fd fcac 	bl	80003b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a5e:	2028      	movs	r0, #40	; 0x28
 8002a60:	f7fd fcc5 	bl	80003ee <HAL_NVIC_EnableIRQ>

}
 8002a64:	bf00      	nop
 8002a66:	3720      	adds	r7, #32
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40010800 	.word	0x40010800
 8002a74:	10110000 	.word	0x10110000
 8002a78:	40011000 	.word	0x40011000

08002a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <HAL_MspInit+0x5c>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <HAL_MspInit+0x5c>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6193      	str	r3, [r2, #24]
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_MspInit+0x5c>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_MspInit+0x5c>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <HAL_MspInit+0x5c>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	61d3      	str	r3, [r2, #28]
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <HAL_MspInit+0x5c>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_MspInit+0x60>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <HAL_MspInit+0x60>)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40010000 	.word	0x40010000

08002aec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_TIM_PWM_MspInit+0x34>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d10b      	bne.n	8002b16 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_TIM_PWM_MspInit+0x38>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	4a08      	ldr	r2, [pc, #32]	; (8002b24 <HAL_TIM_PWM_MspInit+0x38>)
 8002b04:	f043 0302 	orr.w	r3, r3, #2
 8002b08:	61d3      	str	r3, [r2, #28]
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_TIM_PWM_MspInit+0x38>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40021000 	.word	0x40021000

08002b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_TIM_Base_MspInit+0x34>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10b      	bne.n	8002b52 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_TIM_Base_MspInit+0x38>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <HAL_TIM_Base_MspInit+0x38>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	61d3      	str	r3, [r2, #28]
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_TIM_Base_MspInit+0x38>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	40000800 	.word	0x40000800
 8002b60:	40021000 	.word	0x40021000

08002b64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a28      	ldr	r2, [pc, #160]	; (8002c20 <HAL_TIM_MspPostInit+0xbc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d12b      	bne.n	8002bdc <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b84:	4b27      	ldr	r3, [pc, #156]	; (8002c24 <HAL_TIM_MspPostInit+0xc0>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	4a26      	ldr	r2, [pc, #152]	; (8002c24 <HAL_TIM_MspPostInit+0xc0>)
 8002b8a:	f043 0310 	orr.w	r3, r3, #16
 8002b8e:	6193      	str	r3, [r2, #24]
 8002b90:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_TIM_MspPostInit+0xc0>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002b9c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002baa:	f107 0314 	add.w	r3, r7, #20
 8002bae:	4619      	mov	r1, r3
 8002bb0:	481d      	ldr	r0, [pc, #116]	; (8002c28 <HAL_TIM_MspPostInit+0xc4>)
 8002bb2:	f7fd fcad 	bl	8000510 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <HAL_TIM_MspPostInit+0xc8>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd4:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <HAL_TIM_MspPostInit+0xc8>)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002bda:	e01c      	b.n	8002c16 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM4)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a13      	ldr	r2, [pc, #76]	; (8002c30 <HAL_TIM_MspPostInit+0xcc>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d117      	bne.n	8002c16 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_TIM_MspPostInit+0xc0>)
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <HAL_TIM_MspPostInit+0xc0>)
 8002bec:	f043 0308 	orr.w	r3, r3, #8
 8002bf0:	6193      	str	r3, [r2, #24]
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <HAL_TIM_MspPostInit+0xc0>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bfe:	2340      	movs	r3, #64	; 0x40
 8002c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c06:	2303      	movs	r3, #3
 8002c08:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0a:	f107 0314 	add.w	r3, r7, #20
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4808      	ldr	r0, [pc, #32]	; (8002c34 <HAL_TIM_MspPostInit+0xd0>)
 8002c12:	f7fd fc7d 	bl	8000510 <HAL_GPIO_Init>
}
 8002c16:	bf00      	nop
 8002c18:	3728      	adds	r7, #40	; 0x28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40011000 	.word	0x40011000
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	40000800 	.word	0x40000800
 8002c34:	40010c00 	.word	0x40010c00

08002c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08c      	sub	sp, #48	; 0x30
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 0320 	add.w	r3, r7, #32
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a5b      	ldr	r2, [pc, #364]	; (8002dc0 <HAL_UART_MspInit+0x188>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d13a      	bne.n	8002cce <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c58:	4b5a      	ldr	r3, [pc, #360]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4a59      	ldr	r2, [pc, #356]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c62:	6193      	str	r3, [r2, #24]
 8002c64:	4b57      	ldr	r3, [pc, #348]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c70:	4b54      	ldr	r3, [pc, #336]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4a53      	ldr	r2, [pc, #332]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	6193      	str	r3, [r2, #24]
 8002c7c:	4b51      	ldr	r3, [pc, #324]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c92:	2303      	movs	r3, #3
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c96:	f107 0320 	add.w	r3, r7, #32
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	484a      	ldr	r0, [pc, #296]	; (8002dc8 <HAL_UART_MspInit+0x190>)
 8002c9e:	f7fd fc37 	bl	8000510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb0:	f107 0320 	add.w	r3, r7, #32
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4844      	ldr	r0, [pc, #272]	; (8002dc8 <HAL_UART_MspInit+0x190>)
 8002cb8:	f7fd fc2a 	bl	8000510 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	2025      	movs	r0, #37	; 0x25
 8002cc2:	f7fd fb78 	bl	80003b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cc6:	2025      	movs	r0, #37	; 0x25
 8002cc8:	f7fd fb91 	bl	80003ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ccc:	e074      	b.n	8002db8 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a3e      	ldr	r2, [pc, #248]	; (8002dcc <HAL_UART_MspInit+0x194>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d138      	bne.n	8002d4a <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cd8:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	4a39      	ldr	r2, [pc, #228]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce2:	61d3      	str	r3, [r2, #28]
 8002ce4:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf0:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	4a33      	ldr	r2, [pc, #204]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	6193      	str	r3, [r2, #24]
 8002cfc:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin;
 8002d08:	2304      	movs	r3, #4
 8002d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d10:	2303      	movs	r3, #3
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8002d14:	f107 0320 	add.w	r3, r7, #32
 8002d18:	4619      	mov	r1, r3
 8002d1a:	482b      	ldr	r0, [pc, #172]	; (8002dc8 <HAL_UART_MspInit+0x190>)
 8002d1c:	f7fd fbf8 	bl	8000510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_RX_Pin;
 8002d20:	2308      	movs	r3, #8
 8002d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8002d2c:	f107 0320 	add.w	r3, r7, #32
 8002d30:	4619      	mov	r1, r3
 8002d32:	4825      	ldr	r0, [pc, #148]	; (8002dc8 <HAL_UART_MspInit+0x190>)
 8002d34:	f7fd fbec 	bl	8000510 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	2026      	movs	r0, #38	; 0x26
 8002d3e:	f7fd fb3a 	bl	80003b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d42:	2026      	movs	r0, #38	; 0x26
 8002d44:	f7fd fb53 	bl	80003ee <HAL_NVIC_EnableIRQ>
}
 8002d48:	e036      	b.n	8002db8 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a20      	ldr	r2, [pc, #128]	; (8002dd0 <HAL_UART_MspInit+0x198>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d131      	bne.n	8002db8 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	4a1a      	ldr	r2, [pc, #104]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5e:	61d3      	str	r3, [r2, #28]
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002d72:	f043 0308 	orr.w	r3, r3, #8
 8002d76:	6193      	str	r3, [r2, #24]
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_UART_MspInit+0x18c>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d92:	f107 0320 	add.w	r3, r7, #32
 8002d96:	4619      	mov	r1, r3
 8002d98:	480e      	ldr	r0, [pc, #56]	; (8002dd4 <HAL_UART_MspInit+0x19c>)
 8002d9a:	f7fd fbb9 	bl	8000510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002da4:	2300      	movs	r3, #0
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dac:	f107 0320 	add.w	r3, r7, #32
 8002db0:	4619      	mov	r1, r3
 8002db2:	4808      	ldr	r0, [pc, #32]	; (8002dd4 <HAL_UART_MspInit+0x19c>)
 8002db4:	f7fd fbac 	bl	8000510 <HAL_GPIO_Init>
}
 8002db8:	bf00      	nop
 8002dba:	3730      	adds	r7, #48	; 0x30
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40013800 	.word	0x40013800
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40010800 	.word	0x40010800
 8002dcc:	40004400 	.word	0x40004400
 8002dd0:	40004800 	.word	0x40004800
 8002dd4:	40010c00 	.word	0x40010c00

08002dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de8:	e7fe      	b.n	8002de8 <HardFault_Handler+0x4>

08002dea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dee:	e7fe      	b.n	8002dee <MemManage_Handler+0x4>

08002df0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df4:	e7fe      	b.n	8002df4 <BusFault_Handler+0x4>

08002df6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dfa:	e7fe      	b.n	8002dfa <UsageFault_Handler+0x4>

08002dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e24:	f7fd f9d8 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e30:	4802      	ldr	r0, [pc, #8]	; (8002e3c <TIM3_IRQHandler+0x10>)
 8002e32:	f7fe f9a5 	bl	8001180 <HAL_TIM_IRQHandler>
//  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 1000+led1_value*10);
//
//  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,1000+led2_value*10);

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	200000b4 	.word	0x200000b4

08002e40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <USART1_IRQHandler+0x10>)
 8002e46:	f7ff f835 	bl	8001eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200000f8 	.word	0x200000f8

08002e54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <USART2_IRQHandler+0x10>)
 8002e5a:	f7ff f82b 	bl	8001eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000144 	.word	0x20000144

08002e68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002e6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e70:	f7fd fcc4 	bl	80007fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002e7c:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <SystemInit+0x5c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <SystemInit+0x5c>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002e88:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <SystemInit+0x5c>)
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	4911      	ldr	r1, [pc, #68]	; (8002ed4 <SystemInit+0x5c>)
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <SystemInit+0x60>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002e94:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <SystemInit+0x5c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <SystemInit+0x5c>)
 8002e9a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <SystemInit+0x5c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <SystemInit+0x5c>)
 8002eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <SystemInit+0x5c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <SystemInit+0x5c>)
 8002eb6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002eba:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <SystemInit+0x5c>)
 8002ebe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002ec2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <SystemInit+0x64>)
 8002ec6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eca:	609a      	str	r2, [r3, #8]
#endif 
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	f8ff0000 	.word	0xf8ff0000
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ee0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ee2:	e003      	b.n	8002eec <LoopCopyDataInit>

08002ee4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ee6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ee8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002eea:	3104      	adds	r1, #4

08002eec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002eec:	480a      	ldr	r0, [pc, #40]	; (8002f18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ef0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ef2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ef4:	d3f6      	bcc.n	8002ee4 <CopyDataInit>
  ldr r2, =_sbss
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ef8:	e002      	b.n	8002f00 <LoopFillZerobss>

08002efa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002efa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002efc:	f842 3b04 	str.w	r3, [r2], #4

08002f00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002f02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002f04:	d3f9      	bcc.n	8002efa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f06:	f7ff ffb7 	bl	8002e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f0a:	f000 f80f 	bl	8002f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f0e:	f7ff fb1f 	bl	8002550 <main>
  bx lr
 8002f12:	4770      	bx	lr
  ldr r3, =_sidata
 8002f14:	08002fd0 	.word	0x08002fd0
  ldr r0, =_sdata
 8002f18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002f1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002f20:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002f24:	200001a0 	.word	0x200001a0

08002f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f28:	e7fe      	b.n	8002f28 <ADC1_2_IRQHandler>
	...

08002f2c <__libc_init_array>:
 8002f2c:	b570      	push	{r4, r5, r6, lr}
 8002f2e:	2500      	movs	r5, #0
 8002f30:	4e0c      	ldr	r6, [pc, #48]	; (8002f64 <__libc_init_array+0x38>)
 8002f32:	4c0d      	ldr	r4, [pc, #52]	; (8002f68 <__libc_init_array+0x3c>)
 8002f34:	1ba4      	subs	r4, r4, r6
 8002f36:	10a4      	asrs	r4, r4, #2
 8002f38:	42a5      	cmp	r5, r4
 8002f3a:	d109      	bne.n	8002f50 <__libc_init_array+0x24>
 8002f3c:	f000 f822 	bl	8002f84 <_init>
 8002f40:	2500      	movs	r5, #0
 8002f42:	4e0a      	ldr	r6, [pc, #40]	; (8002f6c <__libc_init_array+0x40>)
 8002f44:	4c0a      	ldr	r4, [pc, #40]	; (8002f70 <__libc_init_array+0x44>)
 8002f46:	1ba4      	subs	r4, r4, r6
 8002f48:	10a4      	asrs	r4, r4, #2
 8002f4a:	42a5      	cmp	r5, r4
 8002f4c:	d105      	bne.n	8002f5a <__libc_init_array+0x2e>
 8002f4e:	bd70      	pop	{r4, r5, r6, pc}
 8002f50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f54:	4798      	blx	r3
 8002f56:	3501      	adds	r5, #1
 8002f58:	e7ee      	b.n	8002f38 <__libc_init_array+0xc>
 8002f5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f5e:	4798      	blx	r3
 8002f60:	3501      	adds	r5, #1
 8002f62:	e7f2      	b.n	8002f4a <__libc_init_array+0x1e>
 8002f64:	08002fc8 	.word	0x08002fc8
 8002f68:	08002fc8 	.word	0x08002fc8
 8002f6c:	08002fc8 	.word	0x08002fc8
 8002f70:	08002fcc 	.word	0x08002fcc

08002f74 <memset>:
 8002f74:	4603      	mov	r3, r0
 8002f76:	4402      	add	r2, r0
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d100      	bne.n	8002f7e <memset+0xa>
 8002f7c:	4770      	bx	lr
 8002f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f82:	e7f9      	b.n	8002f78 <memset+0x4>

08002f84 <_init>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	bf00      	nop
 8002f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8a:	bc08      	pop	{r3}
 8002f8c:	469e      	mov	lr, r3
 8002f8e:	4770      	bx	lr

08002f90 <_fini>:
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	bf00      	nop
 8002f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f96:	bc08      	pop	{r3}
 8002f98:	469e      	mov	lr, r3
 8002f9a:	4770      	bx	lr
